/* ItemCard.module.scss — light neumorphic grid card
   Uses :global so your existing classNames work unchanged. */

$bg: #f3f6fb;             // page bg
$card: #e7ecf6;           // card bg
$white: #fff;
$text: #3d4468;           // primary text
$muted: #7d84a3;          // secondary text
$accent: #5aa6ff;         // soft electronics blue
$shadow-dark: #d4dae6;
$shadow-light: #ffffff;
$radius: 18px;

:global(.items-loading) {
  margin: 3rem auto;
  max-width: 720px;
  text-align: center;
  color: $muted;
  font-weight: 600;
}

/* OPTIONAL container if you want the page to flow in a grid.
   You can wrap your list with <div className="items-grid">…</div> */
:global(.items-grid) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(290px, 1fr));
  gap: 18px;
  align-items: stretch;
}

/* The card */
:global(.item-card) {
  background: $card;
  color: $text;
  border-radius: $radius;
  padding: 16px;
  display: grid;
  grid-template-columns: 120px 1fr;
  gap: 14px;
  align-items: center;

  box-shadow:
    14px 14px 34px $shadow-dark,
    -14px -14px 34px $shadow-light;
  transition: transform .12s ease, box-shadow .2s ease, background .2s ease;

  &:hover {
    transform: translateY(-2px);
    box-shadow:
      18px 18px 44px $shadow-dark,
      -18px -18px 44px $shadow-light;
  }

  @media (max-width: 560px) {
    grid-template-columns: 1fr;
  }
}

/* Image */
:global(.item-image) {
  width: 100%;
  aspect-ratio: 4 / 3;
  border-radius: 14px;
  overflow: hidden;
  background: linear-gradient(135deg, #eef2fb, #f9fbff);
  box-shadow: inset 6px 6px 14px rgba(0,0,0,.06), inset -6px -6px 14px rgba(255,255,255,.7);

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    transition: transform .35s ease;
  }

  /* gentle zoom on hover */
  .item-card:hover & img { transform: scale(1.03); }
}

/* Info block */
:global(.item-info) {
  min-width: 0; /* text truncation safety */
}

/* Name */
:global(.item-name) {
  margin: 0 0 6px;
  font-size: 1.05rem;
  font-weight: 800;
  letter-spacing: .2px;
  color: $text;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Meta lines */
:global(.item-meta) {
  display: grid;
  grid-template-columns: repeat(2, minmax(0, 1fr));
  gap: 6px 14px;
  margin-bottom: 8px;

  p {
    margin: 0;
    font-size: .92rem;
    color: $muted;

    strong { color: $text; font-weight: 700; }
  }

  @media (max-width: 560px) {
    grid-template-columns: 1fr;
  }
}

/* Location row */
:global(.item-location) {
  margin: 2px 0 10px;
  font-size: .9rem;
  color: $muted;

  strong {
    color: $accent;
    font-weight: 800;
    letter-spacing: .15px;
  }
}

/* Actions */
:global(.item-actions) {
  display: flex;
  gap: 10px;
  flex-wrap: wrap;
  margin-top: 8px;

  /* Light-ghost tweak for your existing Button component */
  button {
    border-radius: 999px;
    padding: 10px 14px;
    font-weight: 700;
    border: 1px solid rgba(0,0,0,.06);
    background: $white;
    color: $text;
    box-shadow: 8px 8px 18px $shadow-dark, -8px -8px 18px $shadow-light;
    transition: transform .08s ease, box-shadow .18s ease, border-color .18s ease;

    &:hover {
      transform: translateY(-1px);
      border-color: rgba(0,0,0,.12);
      box-shadow: 10px 10px 22px $shadow-dark, -10px -10px 22px $shadow-light;
    }
    &:active { transform: translateY(0); }
  }

  /* a hint of blue for primary-looking actions if your Button adds classes */
  button[data-variant="primary"],
  button.variant-primary {
    border-color: rgba($accent, .35);
  }
}
